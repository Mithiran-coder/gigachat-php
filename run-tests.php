<?php

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ GigaChat PHP SDK
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * php run-tests.php [–æ–ø—Ü–∏–∏]
 * 
 * –û–ø—Ü–∏–∏:
 * --unit          –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
 * --integration   –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–∏)
 * --validation    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * --coverage      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
 * --verbose       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
 * --help          –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 */

class TestRunner
{
    private array $options;
    private string $phpunitPath;

    public function __construct(array $argv)
    {
        $this->options = $this->parseArguments($argv);
        $this->phpunitPath = $this->findPhpUnit();
    }

    public function run(): int
    {
        if (isset($this->options['help'])) {
            $this->showHelp();
            return 0;
        }

        echo "üöÄ GigaChat PHP SDK Test Runner\n";
        echo str_repeat("=", 50) . "\n\n";

        if (!$this->checkRequirements()) {
            return 1;
        }

        $commands = $this->buildCommands();
        $exitCode = 0;

        foreach ($commands as $name => $command) {
            echo "üìã –ó–∞–ø—É—Å–∫: {$name}\n";
            echo "üíª –ö–æ–º–∞–Ω–¥–∞: {$command}\n\n";

            $result = $this->executeCommand($command);
            
            if ($result !== 0) {
                echo "‚ùå –¢–µ—Å—Ç—ã {$name} –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {$result})\n\n";
                $exitCode = $result;
            } else {
                echo "‚úÖ –¢–µ—Å—Ç—ã {$name} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ\n\n";
            }
        }

        if ($exitCode === 0) {
            echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n";
        } else {
            echo "üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏\n";
        }

        return $exitCode;
    }

    private function parseArguments(array $argv): array
    {
        $options = [];
        
        for ($i = 1; $i < count($argv); $i++) {
            $arg = $argv[$i];
            
            if (str_starts_with($arg, '--')) {
                $option = substr($arg, 2);
                $options[$option] = true;
            }
        }

        return $options;
    }

    private function findPhpUnit(): string
    {
        $paths = [
            __DIR__ . '/vendor/bin/phpunit',
            __DIR__ . '/vendor/bin/phpunit.bat',
            'phpunit'
        ];

        foreach ($paths as $path) {
            if (file_exists($path) || $this->commandExists($path)) {
                return $path;
            }
        }

        throw new RuntimeException('PHPUnit –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: composer install --dev');
    }

    private function commandExists(string $command): bool
    {
        $result = shell_exec(sprintf('which %s 2>/dev/null || where %s 2>nul', 
            escapeshellarg($command), 
            escapeshellarg($command)
        ));
        
        return !empty($result);
    }

    private function checkRequirements(): bool
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ PHP –≤–µ—Ä—Å–∏–∏
        if (version_compare(PHP_VERSION, '8.2.0', '<')) {
            echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è PHP 8.2 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: " . PHP_VERSION . "\n";
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ composer.json
        if (!file_exists(__DIR__ . '/composer.json')) {
            echo "‚ùå –§–∞–π–ª composer.json –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ vendor
        if (!is_dir(__DIR__ . '/vendor')) {
            echo "‚ùå –ü–∞–ø–∫–∞ vendor –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: composer install --dev\n";
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
        if (!is_dir(__DIR__ . '/tests')) {
            echo "‚ùå –ü–∞–ø–∫–∞ tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
            return false;
        }

        echo "‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n\n";
        return true;
    }

    private function buildCommands(): array
    {
        $commands = [];
        $baseCommand = $this->phpunitPath;

        if (isset($this->options['verbose'])) {
            $baseCommand .= ' --verbose';
        }

        if (isset($this->options['coverage'])) {
            $baseCommand .= ' --coverage-html coverage';
        }

        if (isset($this->options['unit'])) {
            $commands['Unit —Ç–µ—Å—Ç—ã'] = $baseCommand . ' tests/GigaChatClientTest.php tests/Auth/ tests/Laravel/';
        } elseif (isset($this->options['integration'])) {
            $this->setupIntegrationEnvironment();
            $commands['–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã'] = $baseCommand . ' tests/Integration/';
        } elseif (isset($this->options['validation'])) {
            $commands['–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏'] = $baseCommand . ' tests/Validation/';
        } else {
            // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫—Ä–æ–º–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö
            $commands['Unit —Ç–µ—Å—Ç—ã'] = $baseCommand . ' tests/GigaChatClientTest.php tests/Auth/ tests/Laravel/ tests/Validation/';
            
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if ($this->hasIntegrationCredentials()) {
                $this->setupIntegrationEnvironment();
                $commands['–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã'] = $baseCommand . ' tests/Integration/';
            } else {
                echo "‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (–Ω–µ—Ç API –∫–ª—é—á–µ–π)\n";
                echo "   –î–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: GIGACHAT_CLIENT_ID, GIGACHAT_CLIENT_SECRET\n\n";
            }
        }

        return $commands;
    }

    private function setupIntegrationEnvironment(): void
    {
        putenv('GIGACHAT_INTEGRATION_TEST=true');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env.testing
        $envFile = __DIR__ . '/.env.testing';
        if (file_exists($envFile)) {
            $lines = file($envFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            foreach ($lines as $line) {
                if (strpos($line, '=') !== false && strpos($line, '#') !== 0) {
                    putenv(trim($line));
                }
            }
        }
    }

    private function hasIntegrationCredentials(): bool
    {
        return !empty(getenv('GIGACHAT_CLIENT_ID')) && !empty(getenv('GIGACHAT_CLIENT_SECRET'));
    }

    private function executeCommand(string $command): int
    {
        $descriptors = [
            0 => ['pipe', 'r'],
            1 => ['pipe', 'w'],
            2 => ['pipe', 'w']
        ];

        $process = proc_open($command, $descriptors, $pipes, __DIR__);

        if (!is_resource($process)) {
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {$command}\n";
            return 1;
        }

        fclose($pipes[0]);

        $output = stream_get_contents($pipes[1]);
        $error = stream_get_contents($pipes[2]);

        fclose($pipes[1]);
        fclose($pipes[2]);

        $exitCode = proc_close($process);

        if (!empty($output)) {
            echo $output;
        }

        if (!empty($error) && $exitCode !== 0) {
            echo "–û—à–∏–±–∫–∏:\n" . $error . "\n";
        }

        return $exitCode;
    }

    private function showHelp(): void
    {
        echo "üöÄ GigaChat PHP SDK Test Runner\n\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php run-tests.php [–æ–ø—Ü–∏–∏]\n\n";
        echo "–û–ø—Ü–∏–∏:\n";
        echo "  --unit          –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã\n";
        echo "  --integration   –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–∏)\n";
        echo "  --validation    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n";
        echo "  --coverage      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞\n";
        echo "  --verbose       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥\n";
        echo "  --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n";
        echo "–ü—Ä–∏–º–µ—Ä—ã:\n";
        echo "  php run-tests.php                    # –í—Å–µ —Ç–µ—Å—Ç—ã\n";
        echo "  php run-tests.php --unit             # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã\n";
        echo "  php run-tests.php --integration      # –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ\n";
        echo "  php run-tests.php --coverage         # –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞\n";
        echo "  php run-tests.php --unit --verbose   # Unit —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º\n\n";
        echo "–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n";
        echo "  GIGACHAT_CLIENT_ID=your_client_id\n";
        echo "  GIGACHAT_CLIENT_SECRET=your_client_secret\n";
        echo "  GIGACHAT_SCOPE=GIGACHAT_API_PERS\n\n";
        echo "–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.testing —Å —ç—Ç–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.\n";
    }
}

// –ó–∞–ø—É—Å–∫
try {
    $runner = new TestRunner($argv);
    exit($runner->run());
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    exit(1);
}
